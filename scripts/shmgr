#!/bin/bash

#################################################################################
# A thin shell wrapper around shmgr's main Python interface.
#
# Used primarily to speed up sequential loads of the same library (since just
# having to load the Python interpretter into memory is enough to cause a few
# second delay on some machines).
#################################################################################

SCRIPTNAME="$(basename "$0")"

function run() {
    local is_loadable_from_cache=false
    local shell_lib_specs=()
    for opt in "$@"; do
        if [[ "${opt}" == "-vv"* ]]; then
            shift
            PS4='$LINENO: '
            set -x
        fi

        if [[ "${opt}" == "-"* ]]; then
            # If the `shmgr load` command has options...
            if [[ "${is_loadable_from_cache}" == true ]]; then
                # Then we run the Python version of shmgr...
                is_loadable_from_cache=false
                break
            else
                continue
            fi
        fi

        if [[ "${is_loadable_from_cache}" == true ]]; then
            shell_lib_specs+=("${opt}")
        elif [[ "${opt}" == "load" ]]; then
            is_loadable_from_cache=true
        fi
    done

    if [[ "${is_loadable_from_cache}" != true ]] || ! load_libs_from_cache "${shell_lib_specs[@]}"; then
        shmgr_wrapper "$@"
    fi
}

function load_libs_from_cache() {
    local cached_lib_files=()
    local cache_dir="$(get_cache_dir)"

    for shell_lib_spec in "$@"; do
        local lib_name="$(get_lib_name "${shell_lib_spec}")"
        local lib_version="$(get_lib_version "${shell_lib_spec}")"
        local found_match=false

        local this_libs_cache_dir="${cache_dir}"/"${lib_name}"
        for full_fname in "${this_libs_cache_dir}"/*; do
            local base_fname="$(basename "${full_fname}")"
            if [[ "${base_fname:0:1}" != "${lib_version:0:1}" ]]; then
                continue
            fi

            if version_gte "${base_fname}" "${lib_version}"; then
                cached_lib_files+=("${full_fname}")
                found_match=true
                break
            fi
        done

        if [[ "${found_match}" != true ]]; then
            return 1
        fi
    done

    cat "${cached_lib_files[@]}"
}

function get_lib_version() {
    local spec="$1"
    shift

    local result  # will be set in the next code block...
    local ver="${spec##*:}"
    if ! str_contains_dot "${ver}"; then
        result="${ver}".0.0
    elif ! str_contains_dot "${ver%.*}"; then
        result="${ver}".0
    else
        result="${ver}"
    fi

    echo "${result}"
}

function version_gte() {
    local V1="$1"
    shift

    local V2="$1"
    shift

    # If V1 is the same as V2...
    if [[ "${V1}" == "${V2}" ]]; then
        return 0
    fi

    # If V1 is greater than V2...
    if [[ "$(printf '%s\n' "${V1}" "${V2}" | sort -V | head -n 1)" != "${V1}" ]]; then
        return 0
    fi

    # Otherwise, V2 is greater than V1...
    return 1
}

function get_cache_dir() { echo "${SHMGR_CACHE_DIR:-"${XDG_CACHE_DIR:-"${HOME}"/.cache/shmgr}"}"; }
function get_lib_name() { echo "${1%%:*}"; }
function shmgr_wrapper() { XDG_CACHE_DIR="${SHMGR_CACHE_DIR:-"${XDG_CACHE_DIR:-}"}" python -m shmgr.cli "$@"; }
function str_contains_dot() { echo "$1" | grep -q "\."; }

if [[ "${SCRIPTNAME}" == "$(basename "${BASH_SOURCE[0]}")" ]]; then
    run "$@"
fi
